# The name of our workflow
name: Build
on: [push, pull_request]

jobs:
  mingw:
    strategy:
      matrix:
        include:
          - target: mingw64
            chost: x86_64-w64-mingw32
          - target: mingw
            chost: i686-w64-mingw32

    runs-on: ubuntu-20.04
    env:
      MAKEFLAGS: -j3
      LZO_VERSION: "2.10"
      PKCS11_HELPER_VERSION: "1.26"
      OPENSSL_VERSION: "1.1.1j"
      TAP_WINDOWS_VERSION: "9.23.3"
      CHOST: ${{ matrix.chost }}
      TARGET: ${{ matrix.target }}
    steps:
      - name: Install dependencies
        run: sudo apt install -y mingw-w64 libtool automake autoconf man2html unzip
      - name: Checkout ovpn-dco-win
        uses: actions/checkout@v2
        with:
          repository: OpenVPN/ovpn-dco-win
          path: ovpn-dco-win
      - name: Checkout OpenVPN
        uses: actions/checkout@v2
        with:
          path: openvpn
      - name: run ls
        run: ls
      - name: run ls ~
        run: ls ~
          
      - name: autoconf
        run: autoreconf -fvi
        working-directory: openvpn

      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v2
        with:
          path: ${HOME}/mingw/
          key: ${{ matrix.target }}-mingw-deps-openssl-1.1.1j
        
      - name: Download mingw depnendencies
        run: |
          wget -c -P download-cache/ "https://build.openvpn.net/downloads/releases/tap-windows-${TAP_WINDOWS_VERSION}.zip"
          wget -c -P download-cache/ "https://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VERSION}.tar.gz"
          wget -c -P download-cache/ "https://github.com/OpenSC/pkcs11-helper/archive/pkcs11-helper-${PKCS11_HELPER_VERSION}.tar.gz"
          wget -c -P download-cache/ "https://www.openssl.org/source/old/1.1.1/openssl-${OPENSSL_VERSION}.tar.gz"
          tar zxf "download-cache/pkcs11-helper-${PKCS11_HELPER_VERSION}.tar.gz"
          tar zxf "download-cache/openssl-${OPENSSL_VERSION}.tar.gz"
          tar zxf "download-cache/lzo-${LZO_VERSION}.tar.gz"
          unzip download-cache/tap-windows-${TAP_WINDOWS_VERSION}.zip

      - name: Configure OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != true
        run: ./Configure --cross-compile-prefix=${CHOST}- shared ${{ matrix.target }} no-capieng --prefix="${HOME}/mingw/opt" --openssldir="${HOME}/mingw/opt" -static-libgcc
        working-directory: "./openssl-1.1.1j"
        
      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != true
        run: make
        working-directory: "./openssl-1.1.1j/"

      - name: Install OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != true
        run: make install
        working-directory: "./openssl-1.1.1j/"
        
      - name: autoreconf pkcs11-helper
        run: autoreconf -iv
        working-directory: "./pkcs11-helper-pkcs11-helper-1.26"

      - name: configure pkcs11-helper
        run: OPENSSL_LIBS="-L${HOME}/mingw/opt/lib -lssl -lcrypto" OPENSSL_CFLAGS=-I$HOME/mingw/opt/include PKG_CONFIG_PATH=${HOME}/mingw/opt/lib/pkgconfig ./configure --host=${CHOST} --program-prefix='' --libdir=${HOME}/mingw/opt/lib --prefix=${HOME}/mingw/opt --build=x86_64-pc-linux-gnu --disable-crypto-engine-gnutls --disable-crypto-engine-nss --disable-crypto-engine-polarssl --disable-crypto-engine-mbedtls
        working-directory: "./pkcs11-helper-pkcs11-helper-1.26"
        
      - name: build pkcs11-helper
        run: make all
        working-directory: "./pkcs11-helper-pkcs11-helper-1.26"
        
      - name: install pkcs11-helper
        run: make install
        working-directory: "./pkcs11-helper-pkcs11-helper-1.26"

      - name: Configure lzo
        run: ./configure --host=${CHOST} --program-prefix='' --libdir=${HOME}/mingw/opt/lib --prefix=${HOME}/mingw/opt --build=x86_64-pc-linux-gnu
        working-directory: "./lzo-2.10"
        
      - name: build lzo
        working-directory: "./lzo-2.10"
        run: make
        
      - name: install lzo
        working-directory: "./lzo-2.10"
        run: make install

      - name: copy tap-windows.h header
        run: cp ./tap-windows-9.23.3/include/tap-windows.h ${HOME}/mingw/opt/include/

      - name: configure OpenVPN
        run: PKG_CONFIG_PATH=${HOME}/mingw/opt/lib/pkgconfig DCO_SOURCEDIR=$(realpath ../ovpn-dco-win) LDFLAGS=-L$HOME/mingw/opt/lib CFLAGS=-I$HOME/mingw/opt/include OPENSSL_LIBS="-L${HOME}/opt/lib -lssl -lcrypto" OPENSSL_CFLAGS=-I$HOME/mingw/opt/include PREFIX=$HOME/mingw/opt LZO_CFLAGS=-I$HOME/mingw/opt/include LZO_LIBS="-L${HOME}/mingw/opt/lib -llzo2" ./configure  --host=${CHOST} --disable-lz4 --enable-dco
        working-directory: openvpn
                
      - name: build OpenVPN
        run: make -j3
        working-directory: openvpn
  
  ubuntu:
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04]
        ssllib: [mbedtls, openssl]

    runs-on: ${{matrix.os}}
    steps:
      - name: Install dependencies
        run: sudo apt install -y liblzo2-dev libpam0g-dev liblz4-dev linux-libc-dev man2html libcmocka-dev python3-docutils libtool automake autoconf libmbedtls-dev
      - name: Checkout OpenVPN
        uses: actions/checkout@v2
      - name: autoconf
        run: autoreconf -fvi
      - name: configure --with-crypto-library=${{matrix.ssllib}}
        run: ./configure
      - name: make all
        run: make -j3
      - name: make check
        run: make check
          
  ubutun20-clang-asan:
    strategy:
      matrix:
        ssllib: [mbedtls, openssl]

    runs-on: ubuntu-20.04
    steps:
      - name: Install dependencies
        run: sudo apt install -y liblzo2-dev libpam0g-dev liblz4-dev linux-libc-dev man2html clang libcmocka-dev python3-docutils libtool automake autoconf libmbedtls-dev
      - name: Checkout OpenVPN
        uses: actions/checkout@v2
      - name: autoconf
        run: autoreconf -fvi
      - name: configure
        run: CFLAGS="-fsanitize=address -fno-omit-frame-pointer -O2" CC=clang ./configure --with-crypto-library=${{matrix.ssllib}}
      - name: make all
        run: make -j3
      - name: make check
        run: make check


  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout OpenVPN
        uses: actions/checkout@v2
      - name: Install dependencies
        run: brew install openssl lzo lz4 man2html cmocka libtool automake autoconf
      - name: autoconf
        run: autoreconf -fvi
      - name: configure
        run: OPENSSL_CFLAGS=-I/usr/local/opt/openssl@1.1/include  OPENSSL_LIBS="-L/usr/local/opt/openssl@1.1/lib -lcrypto -lssl" ./configure
      - name: make all
        run: make -j4
      - name: make check
        run: make check





  msvc:
    strategy:
      matrix:
        arch: [x64, x86, amd64_arm64]

    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg  
      SOLUTION_FILE_PATH: .
      BUILD_CONFIGURATION: Release
      buildDir: '${{ github.workspace }}/build'
    
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: lukka/get-cmake@latest
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Restore from cache and install vcpkg
      uses: lukka/run-vcpkg@v6
      with:
        setupOnly: true
        vcpkgGitCommitId: 'a267ab118c09f56f3dae96c9a4b3410820ad2f0b'
        additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
        appendedCacheKey: ${{ matrix.arch }}-${{ hashFiles( '**/vcpkg.json' ) }}

    - name: Run CMake with vcpkg.json manifest
      uses: lukka/run-cmake@v3
      env:
        VCPKG_OVERLAY_PORTS: '${{ github.workspace }}/contrib/vcpkg-ports'
      with:
        useVcpkgToolchainFile: true
        buildWithCMake: true
        buildDirectory: ${{ env.buildDir }}
        cmakeAppendedArgs: '-GNinja'
        
    - uses: actions/upload-artifact@v2
      with:
        name: openvpn ${{ matrix.arch }}
        path: '${{ github.workspace }}/build/openvpn.exe'

